// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:flutter_manager/models/comment_entity.dart';
import 'package:flutter_manager/models/experience_item_entity.dart';
import 'package:flutter_manager/models/experience_overview_entity.dart';
import 'package:flutter_manager/models/fans_entity.dart';
import 'package:flutter_manager/models/joke_comment_entity.dart';
import 'package:flutter_manager/models/joke_detail_entity.dart';
import 'package:flutter_manager/models/joke_like_user_entity.dart';
import 'package:flutter_manager/models/login_entity.dart';
import 'package:flutter_manager/models/qi_niu_token_entity.dart';
import 'package:flutter_manager/models/recommend_attention_entity.dart';
import 'package:flutter_manager/models/user_center_entity.dart';
import 'package:flutter_manager/models/user_info_entity.dart';
import 'package:flutter_manager/models/video_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
	static final Map<String, JsonConvertFunction> convertFuncMap = {
		(CommentEntity).toString(): CommentEntity.fromJson,
		(ExperienceItemEntity).toString(): ExperienceItemEntity.fromJson,
		(ExperienceOverviewEntity).toString(): ExperienceOverviewEntity.fromJson,
		(FansEntity).toString(): FansEntity.fromJson,
		(JokeCommentEntity).toString(): JokeCommentEntity.fromJson,
		(JokeComment).toString(): JokeComment.fromJson,
		(JokeCommentUser).toString(): JokeCommentUser.fromJson,
		(JokeSubComment).toString(): JokeSubComment.fromJson,
		(JokeDetailEntity).toString(): JokeDetailEntity.fromJson,
		(JokeDetailInfo).toString(): JokeDetailInfo.fromJson,
		(JokeDetailJoke).toString(): JokeDetailJoke.fromJson,
		(JokeDetailUser).toString(): JokeDetailUser.fromJson,
		(JokeLikeUserEntity).toString(): JokeLikeUserEntity.fromJson,
		(LoginEntity).toString(): LoginEntity.fromJson,
		(User).toString(): User.fromJson,
		(QiNiuTokenEntity).toString(): QiNiuTokenEntity.fromJson,
		(RecommendAttentionEntity).toString(): RecommendAttentionEntity.fromJson,
		(UserCenterEntity).toString(): UserCenterEntity.fromJson,
		(UserInfoEntity).toString(): UserInfoEntity.fromJson,
		(UserInfo).toString(): UserInfo.fromJson,
		(VideoEntity).toString(): VideoEntity.fromJson,
	};

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<CommentEntity>[] is M){
			return data.map<CommentEntity>((Map<String, dynamic> e) => CommentEntity.fromJson(e)).toList() as M;
		}
		if(<ExperienceItemEntity>[] is M){
			return data.map<ExperienceItemEntity>((Map<String, dynamic> e) => ExperienceItemEntity.fromJson(e)).toList() as M;
		}
		if(<ExperienceOverviewEntity>[] is M){
			return data.map<ExperienceOverviewEntity>((Map<String, dynamic> e) => ExperienceOverviewEntity.fromJson(e)).toList() as M;
		}
		if(<FansEntity>[] is M){
			return data.map<FansEntity>((Map<String, dynamic> e) => FansEntity.fromJson(e)).toList() as M;
		}
		if(<JokeCommentEntity>[] is M){
			return data.map<JokeCommentEntity>((Map<String, dynamic> e) => JokeCommentEntity.fromJson(e)).toList() as M;
		}
		if(<JokeComment>[] is M){
			return data.map<JokeComment>((Map<String, dynamic> e) => JokeComment.fromJson(e)).toList() as M;
		}
		if(<JokeCommentUser>[] is M){
			return data.map<JokeCommentUser>((Map<String, dynamic> e) => JokeCommentUser.fromJson(e)).toList() as M;
		}
		if(<JokeSubComment>[] is M){
			return data.map<JokeSubComment>((Map<String, dynamic> e) => JokeSubComment.fromJson(e)).toList() as M;
		}
		if(<JokeDetailEntity>[] is M){
			return data.map<JokeDetailEntity>((Map<String, dynamic> e) => JokeDetailEntity.fromJson(e)).toList() as M;
		}
		if(<JokeDetailInfo>[] is M){
			return data.map<JokeDetailInfo>((Map<String, dynamic> e) => JokeDetailInfo.fromJson(e)).toList() as M;
		}
		if(<JokeDetailJoke>[] is M){
			return data.map<JokeDetailJoke>((Map<String, dynamic> e) => JokeDetailJoke.fromJson(e)).toList() as M;
		}
		if(<JokeDetailUser>[] is M){
			return data.map<JokeDetailUser>((Map<String, dynamic> e) => JokeDetailUser.fromJson(e)).toList() as M;
		}
		if(<JokeLikeUserEntity>[] is M){
			return data.map<JokeLikeUserEntity>((Map<String, dynamic> e) => JokeLikeUserEntity.fromJson(e)).toList() as M;
		}
		if(<LoginEntity>[] is M){
			return data.map<LoginEntity>((Map<String, dynamic> e) => LoginEntity.fromJson(e)).toList() as M;
		}
		if(<User>[] is M){
			return data.map<User>((Map<String, dynamic> e) => User.fromJson(e)).toList() as M;
		}
		if(<QiNiuTokenEntity>[] is M){
			return data.map<QiNiuTokenEntity>((Map<String, dynamic> e) => QiNiuTokenEntity.fromJson(e)).toList() as M;
		}
		if(<RecommendAttentionEntity>[] is M){
			return data.map<RecommendAttentionEntity>((Map<String, dynamic> e) => RecommendAttentionEntity.fromJson(e)).toList() as M;
		}
		if(<UserCenterEntity>[] is M){
			return data.map<UserCenterEntity>((Map<String, dynamic> e) => UserCenterEntity.fromJson(e)).toList() as M;
		}
		if(<UserInfoEntity>[] is M){
			return data.map<UserInfoEntity>((Map<String, dynamic> e) => UserInfoEntity.fromJson(e)).toList() as M;
		}
		if(<UserInfo>[] is M){
			return data.map<UserInfo>((Map<String, dynamic> e) => UserInfo.fromJson(e)).toList() as M;
		}
		if(<VideoEntity>[] is M){
			return data.map<VideoEntity>((Map<String, dynamic> e) => VideoEntity.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
	}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is M) {
			return json;
		}
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.convert<M>(json);
		}
	}
}